package keeper

import (
	"context"
    "fmt"

    "<%= ModulePath %>/x/<%= moduleName %>/types"
	sdk "github.com/cosmos/cosmos-sdk/types"
	clienttypes "github.com/cosmos/ibc-go/v7/modules/core/02-client/types"
	"github.com/skuchain/<%= appName %>/x/util"
)


func (k msgServer) Send<%= packetName.UpperCamel %>(goCtx context.Context,  msg *types.MsgSend<%= packetName.UpperCamel %>) (*types.MsgSend<%= packetName.UpperCamel %>Response, error) {
	util.IBLogger(util.INFO, "Send<%= packetName.UpperCamel %>.Entry: "+msg.Address+"\n\nSend<%= packetName.UpperCamel %>.Input:\n"+fmt.Sprint(msg))
    ctx := sdk.UnwrapSDKContext(goCtx)

    // TODO: logic before transmitting the packet

    // Construct the packet
    var packet types.<%= packetName.UpperCamel %>PacketData
    <%= for (field) in fields { %>
    packet.<%= field.Name.UpperCamel %> = msg.<%= field.Name.UpperCamel %><% } %>

    // Transmit the packet
    _, err := k.Transmit<%= packetName.UpperCamel %>Packet(
        ctx,
        packet,
        msg.Port,
        msg.ChannelID,
        clienttypes.ZeroHeight(),
        msg.TimeoutTimestamp,
    )
    if err != nil {
        util.IBLogger(util.ERROR, err.Error()+" <%= moduleName %>Id: "+msg.Address)
        return nil, err
    }

    util.IBLogger(util.INFO, "Send<%= packetName.UpperCamel %>.Exit: "+msg.Address+"\n")
	return &types.MsgSend<%= packetName.UpperCamel %>Response{}, nil
}
